#!KAMAILIO

#!define DS_LIST "/usr/local/etc/kamailio/dispatcher.list"
#!define LISTEN_UDP_PUBLIC udp:{{properties.voice_ip_address}}:5060
#!define LISTEN_UDP_PRIVATE udp:{{properties.internal_ip_address}}:5060

#set module path
mpath = "/usr/local/lib64/kamailio/modules"


####### Global Parameters #########
#mhomed=1 # doesn't work with virtual IPs

#!ifdef WITH_DEBUG
debug=4
#!else
debug=2
#!endif
log_stderror=no

memdbg=5
memlog=5

log_facility=LOG_LOCAL6

fork=yes
children=4

auto_aliases=no

listen=LISTEN_UDP_PUBLIC
listen=LISTEN_UDP_PRIVATE

####### FLAGS ######
#!define FLAG_FROM_ASTERISK 10
#!define FLAG_FROM_PEER 11

sip_warning=no

####### Modules Section ########
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
#loadmodule "mi_rpc.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
loadmodule "rtpengine.so"
loadmodule "stun.so"
loadmodule "uac.so"
loadmodule "ctl.so"
loadmodule "ipops.so"
loadmodule "jsonrpcs.so"

# ----------------- setting module-specific parameters ---------------

# ----- dispatcher params -----
modparam("dispatcher", "list_file", DS_LIST)
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")

#modparam("rr", "enable_full_lr", 1)
#modparam("rr", "append_fromtag", 1)

# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:localhost:22222")
modparam("nathelper", "received_avp", "$avp(s:rcv)")


####### Routing Logic ########
# main request routing logic

route {
	# per request initial checks
	route(SANITY_CHECK);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}

	# check src ip and set flag
	route(CHECK_SOURCE_IP);

	# always add record_route when forwarding SUBSCRIBEs
	if (is_method("SUBSCRIBE")) {
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)
	t_check_trans();

	# dispatch destinations
	route(DISPATCH);
}

route[SANITY_CHECK] {

	if (!mf_process_maxfwd_header("10")) {
		#xlog("L_WARN", "$ci|end|too much hops, not enough barley");
		send_reply("483", "Too Many Hops");
		exit;
	}

	if (!sanity_check()) {
		#xlog("L_WARN", "$ci|end|message is insane");
		exit;
	}

	if ($ua == "friendly-scanner" ||
		$ua == "sundayddr" ||
		$ua =~ "sipcli" ) {
		#xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
		exit;
	}

}

route[CHECK_SOURCE_IP] {
	if(ds_is_from_list()) {
		setflag(FLAG_FROM_ASTERISK);
	} else {
		setflag(FLAG_FROM_PEER);
	}
}

route[RELAY] {

	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) {
			t_on_failure("MANAGE_FAILURE");
		}
	}

	if (isflagset(FLAG_FROM_PEER)) {
		force_send_socket(LISTEN_UDP_PRIVATE);
 	} else {
		force_send_socket(LISTEN_UDP_PUBLIC);
	}


	if (!t_relay()) {
		sl_reply_error();
	}
	#exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(RELAY);
		} else {
			if (is_method("NOTIFY")) {
				route(RELAY);
			}

			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				exit;
			}

			if (is_method("ACK")) {
				if (t_check_trans()) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) {
		exit;
	}
}

onreply_route[1] {
	if (has_body("application/sdp")) {
		rtpengine_answer();
	}
}

onreply_route[2] {
	if (has_body("application/sdp")) {
		rtpengine_offer();
	}
}

# Dispatch requests
route[DISPATCH] {
	# round robin dispatching on gateways group '1'
	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|REFER")) {
		record_route();
		if (has_body("application/sdp")) {
			if (rtpengine_offer()) {
				t_on_reply("1");
			}
		} else {
			t_on_reply("2");
		}
		if (isflagset(FLAG_FROM_PEER)) {
			if(!ds_select_dst("1", "4")) {
				send_reply("404", "No destination");
				exit;
			}
		}
	}

	if (is_method("ACK") && has_body("application/sdp")) {
		rtpengine_answer();
	}

	route(RELAY);
}
